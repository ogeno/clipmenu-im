#!/bin/bash
# clipmenu-im: manage your clipboard history
#
# Copyright (C) 2016 Tomasz Winiarski
#
# Credits: this script reuses code from 'clipmenu' by cdown
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
cache_dir="/tmp/clipmenu.$USER"
# dmenu default look
dmenu_l="8"
dmenu_p="PASTE"
dmenu_p_delete="DELETE"
dmenu_sb="steelblue4"
dmenu_sb_delete="red"
set_dmenu_opts() { echo -n "-l $dmenu_l -p $dmenu_p -sb $dmenu_sb" ; }
# We use this to make sure the cache files are sorted bytewise
LC_COLLATE=C
# Some people copy/paste huge swathes of text that could slow down dmenu
line_length_limit=100

declare -A selections

for arg in "$@"; do # very crude command line arguments parsing
  case "$arg" in 
    '-c') cli_menu=1 ;; # force use of 'select' instead of dmenu
    '-d') action='delete' dmenu_sb="$dmenu_sb_delete" dmenu_p="$dmenu_p_delete " ;; # delete from history (multi-selection possible) 
    '-D') echo "Sure to purge the clipboard history? [y|N]" ; read -n1 a ; echo ; [[ "$a" =~ y|Y|t|T ]] && rm $cache_dir/* ; exit 0;; # purge the whole history
    *) dmenu_optse+=" $arg";; # dump here all dmenu options from command line
  esac
done
# infinite loop
# we break out of it:
# - automatically if we *copy* from history to clipboard
# - after user presses C-c (or $chosen_line is empty) if we *delete* from history
while : ; do
  # reset variables
  unset choosen_line file files first_line number_of_lines line lines 
  ordered_selections=()
  selections=()
  files=("$cache_dir/"*)
  # We can't use `for ... in` here because we need to add files to
  # ordered_selections from last to first -- that is, newest to oldest. Incoming
  # clipboard entries have a ISO datetime prefixed to the front to aid in this.
  for (( i=${#files[@]}-1; i>=0; i-- )); do
      file=${files[$i]}

      readarray -t lines <"$file"

      number_of_lines=${#lines[@]}
      # We look for non empty line to provide meaningful clue to user
      for line in "${lines[@]}"; do
        [[ "$line" =~ ^[[:blank:]]*$ ]] && continue
        # truncate first line to some manageable length
        first_line="${line:0:$line_length_limit}"  
        break
      done
      # if file is empty or blank, we skip to the next one 
      if [[ ! "$first_line" ]]; then
        rm "$file" # if you wish to remove empty file uncomment this
        continue
      fi

      if (( number_of_lines > 1 )); then first_line+=" ($number_of_lines lines)"; fi

      ordered_selections+=("$first_line")
      selections[$first_line]=$file 
  done
  # use cli-based menu instead of dmenu
  if [[ "$cli_menu" -eq 1 ]]; then
    select chosen_line in "${ordered_selections[@]}"; do break; done
  else
    chosen_line=$(printf '%s\n' "${ordered_selections[@]}" | dmenu $(set_dmenu_opts)) 
  fi

  [[ "$chosen_line" ]] || exit 1

  if [[ "$action" == "delete" ]]; then
    rm "${selections[$chosen_line]}"
    continue
  else
    for selection in clipboard primary; do
        if type -p xsel >/dev/null 2>&1; then
            xsel -i --"$selection" < "${selections[$chosen_line]}"
        else
            xclip -sel "$selection" < "${selections[$chosen_line]}"
        fi
    done
    # Unclutters the history a little bit. 
    # We've just put the target of ${selection[$chosen_line]}
    # into clipboard.
    # Clipmenud will grab it and create file with new datastamp,
    # but identical content :P
    rm "${selections[$chosen_line]}"
    exit 0
  fi
done
